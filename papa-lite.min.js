/* @license
PapaLite v5.5.3
based on PapaParse by @mholt
https://github.com/nicsco/PapaLite
License: MIT
*/
export const PapaLite=(()=>{const e={delimiter:",",header:!1,dynamicTyping:!1,skipEmptyLines:!1,newline:"\n"};function r(e){return""===e?"":isNaN(e)?/^(true|false)$/i.test(e)?"true"===e.toLowerCase():e:Number(e)}return{parse:function(t,n={}){const s={...e,...n},o=[],i=[],l=s.newline,a=s.delimiter;if("string"!=typeof t)return{result:null,errors:[{type:"ParseError",code:"INVALID_INPUT",message:"Input must be a string"}]};const u=t.split(l);let c=[],p=null;for(let e=0;e<u.length;e++){const t=u[e];if(s.skipEmptyLines&&""===t.trim())continue;const n=[];let l=0,m="",y=!1;for(;l<t.length;){const e=t[l],o=t[l+1];y?'"'===e&&'"'===o?(m+='"',l+=2):'"'===e?(y=!1,l++):(m+=e,l++):'"'===e?(y=!0,l++):e===a?(n.push(s.dynamicTyping?r(m):m),m="",l++):(m+=e,l++)}if(y)return o.push({type:"Quotes",code:"UNMATCHED_QUOTES",message:`Unmatched quote at row ${e+1}`,row:e}),{result:null,errors:o};if(n.push(s.dynamicTyping?r(m):m),s.header&&0===e)c=n,p=n.length;else if(null===p&&(p=n.length),n.length!==p&&o.push({type:"FieldMismatch",code:"ROW_LENGTH_MISMATCH",message:`Row ${e+1} has ${n.length} fields, expected ${p}`,row:e}),s.header){const e={};c.forEach(((r,t)=>{e[r]=void 0!==n[t]?n[t]:""})),i.push(e)}else i.push(n)}return{result:i,errors:o.length?o:null}},unparse:function(r,t={}){const n={...e,...t},s=n.newline,o=[];if(!Array.isArray(r))return{result:null,errors:[{type:"UnparseError",code:"INVALID_INPUT",message:"Input must be an array of arrays or array of objects"}]};let i="",l=[];if(Array.isArray(r)&&"object"==typeof r[0]&&!Array.isArray(r[0])){l=Object.keys(r[0]),i+=l.map(a).join(n.delimiter)+s;for(const e of r)i+=l.map((r=>a(e[r]))).join(n.delimiter)+s}else for(const e of r){if(!Array.isArray(e))return o.push({type:"UnparseError",code:"INVALID_ROW",message:"Each row must be an array or all rows must be objects"}),{result:null,errors:o};i+=e.map(a).join(n.delimiter)+s}function a(e){null==e&&(e="");const r=e.toString(),t=r.includes(n.delimiter)||r.includes('"')||r.includes(s),o=r.replace(/"/g,'""');return t?'"'+o+'"':o}return{result:i.trimEnd(),errors:o.length?o:null}}}})();